{
  "globalAnalysis": {
    "results": {
      "cli_analysis": {
        "globalAnalysisName": "CLI Analysis",
        "singlePagePrompt": "你是一个专业的代码分析助手，当用户提供代码文件时，请分析此代码文件在项目中的角色。假定用户对代码不熟悉，并希望快速了解项目的目的和实现方式。请按照以下结构化框架进行分析：\n1. 功能概述：用简明语言（100字以内）总结代码核心功能，描述代码实现目标、应用场景及主要模块，强调关键功能和用途。\n2. 列出该文件依赖的其他文件或模块。\n3. 代码结构分析：分析代码中关键函数、类和方法，简要说明它们的功能和作用；基于代码内容和结构，选择合适的 Mermaid 图表（流程图、时序图、类图或状态图）展示执行流程或模块关系，确保图表符合 Mermaid 语法。\n  \n",
        "summaryPrompt": "基于各文件分析，生成项目结构分析报告：\n\n1. **项目架构概览**\n   - 描述项目的主要模块和组件。\n   - 提供项目的目录结构树形图。\n   - 说明项目采用的架构设计模式（如MVC、MVVM等）。\n   - 使用Mermaid图表展示项目的分层关系。\n\n2. **模块依赖分析**\n   - 使用Mermaid图表展示模块间的依赖关系。\n   - 简述每个关键模块的职责。\n\n请确保分析清晰易懂，并使用Mermaid图表来可视化项目结构和依赖关系。\n",
        "summary": "# 项目结构分析报告\n\n## 一、项目架构概览\n\n### 1. 主要模块和组件\n| 模块名称           | 核心功能                                                                 |\n|--------------------|--------------------------------------------------------------------------|\n| CI/CD自动化模块    | 通过GitHub Action实现文档生成自动化流水线                                |\n| 文档生成引擎       | codeaskcli核心工具，执行代码分析与文档生成                               |\n| AI服务适配层       | 对接OpenAI/Anthropic等大模型服务，支持多厂商API接入                      |\n| 配置管理中心       | 通过YAML文件管理运行时参数（codeask.yml）和Action行为（action.yml）      |\n| PR自动化模块       | 自动创建文档更新PR，实现文档变更闭环管理                                 |\n\n### 2. 目录结构树形图\nbash\n.\n├── .github/\n│   └── workflows/\n│       └── action.yml       # GitHub Action定义文件\n├── config/\n│   └── codeask.yml          # CLI工具配置文件\n├── src/\n│   ├── cli/                 # CLI工具源代码\n│   └── docs_templates/      # 文档生成模板\n└── generated_docs/          # 自动生成的文档目录\n\n\n### 3. 架构设计模式\n**混合架构模式**：\n- **管道过滤器模式**：在CI/CD流程中，通过串联Python环境配置→工具安装→文档生成→PR创建形成处理管道\n- **客户端-服务端模式**：CLI工具作为客户端，通过API与AI服务端交互\n- **插件架构**：通过配置文件支持多AI服务提供商动态切换\n\n### 4. 分层关系图\nmermaid\ngraph TD\n    A[CI/CD层] -->|调用| B[应用服务层]\n    B -->|读取配置| C[配置管理层]\n    B -->|API调用| D[AI服务层]\n    C --> E[(codeask.yml)]\n    A --> F[(action.yml)]\n    \n    subgraph CI/CD层\n        A1[Python环境配置]\n        A2[CLI工具安装]\n        A3[PR自动化]\n    end\n    \n    subgraph 应用服务层\n        B1[文档生成引擎]\n        B2[并发分析器]\n        B3[模板渲染器]\n    end\n    \n    subgraph AI服务层\n        D1[OpenAI]\n        D2[Anthropic]\n        D3[Azure OpenAI]\n    end\n\n\n## 二、模块依赖分析\n\n### 1. 模块依赖关系图\nmermaid\ngraph LR\n    action.yml --> codeaskcli\n    codeaskcli --> codeask.yml\n    codeaskcli --> AI-Service\n    codeask.yml --> Template-Engine\n    \n    subgraph GitHubAction\n        action.yml\n    end\n    \n    subgraph CLI工具\n        codeaskcli\n    end\n    \n    subgraph 配置系统\n        codeask.yml\n    end\n    \n    subgraph 外部服务\n        AI-Service([AI服务])\n        Template-Engine[模板引擎]\n    end\n\n\n### 2. 关键模块职责说明\n\n#### (1) CI/CD自动化模块\n- **输入参数处理**：接收API Key、工作目录等配置参数\n- **环境管理**：自动配置Python 3.12环境\n- **工具链管理**：通过pipx安装codeaskcli工具\n- **变更提交**：自动创建规范化PR（含documentation标签）\n\n#### (2) 文档生成引擎\n- **并发分析**：8线程并行处理YAML/YML文件\n- **智能过滤**：通过glob模式识别目标文件\n- **多模型支持**：动态切换OpenAI/Anthropic等AI服务\n- **报告生成**：应用single_page/summary模板生成结构化文档\n\n#### (3) 配置管理中心\n- **参数托管**：\n  yaml\n  api:\n    provider: openai       # 服务商选择\n    model: gpt-4-1106-preview  # 模型版本\n    temperature: 0.7       # 生成随机性控制\n  analyzer:\n    concurrency: 8         # 并发控制\n  \n\n#### (4) AI服务适配层\n- **统一接口**：封装不同AI服务的API调用差异\n- **容错机制**：自动切换备用服务商（如OpenAI故障时切换Anthropic）\n- **密钥管理**：安全注入API Key（通过GitHub Secrets）\n\n## 三、架构特性总结\n\n1. **双YAML驱动**：\n   - `action.yml`控制CI/CD流程\n   - `codeask.yml`管理文档生成策略\n   \n2. **弹性扩展能力**：\n   - 通过新增AI服务配置即可扩展支持新的大模型\n   - 模板系统支持自定义文档输出格式\n\n3. **安全合规性**：\n   - API密钥通过GitHub Secrets注入\n   - 支持私有化部署的AI服务（base_url配置项）\n\n4. **高效处理能力**：\n   - 并发分析提升处理速度\n   - 精确文件过滤避免无效扫描\n\n该架构通过清晰的层级划分和模块化设计，实现了从代码变更到文档更新的全自动流水线，在保证灵活性的同时提高了团队协作效率。",
        "timestamp": 1745337797,
        "configHash": "120af51df6bb9f4cc1c948e957608e65",
        "configFile": "/home/runner/work/codeask-cli-ci/codeask-cli-ci/codeask.yml"
      }
    }
  },
  "singleFileResults": [
    {
      "filename": "action.yml",
      "content": "### 1. 功能概述  \n该代码文件是一个 GitHub Action 的配置文件，用于在代码仓库的 CI/CD 流程中 **自动化生成代码文档**。核心功能是调用 `codeaskcli` 工具分析代码并生成文档，随后自动创建 Pull Request 提交更新。应用场景是团队协作开发中的文档自动化管理，关键模块包括 Python 环境配置、CLI 工具安装、文档生成和 PR 创建。\n\n---\n\n### 2. 依赖项  \n- **外部 Actions**:\n  - `actions/setup-python@v5` (Python 环境配置)\n  - `threeal/pipx-install-action@v1.0.0` (安装 PyPI 包 `codeaskcli`)\n  - `peter-evans/create-pull-request@v7` (自动创建 PR)\n- **第三方服务**:\n  - OpenAI / Anthropic Claude / Azure OpenAI / Google Gemini（通过 API Key 调用 AI 服务生成文档）\n\n---\n\n### 3. 代码结构分析  \n#### 关键配置模块\n1. **输入参数 (`inputs`)**:\n   - `working-directory`: 指定代码分析的工作目录\n   - `token`: GitHub 权限令牌\n   - 多个 API Key: 用于连接不同的 AI 服务\n\n2. **执行流程 (`runs`)**:\n   mermaid\n   graph TD\n       A[Set up Python 3.12] --> B[Install codeaskcli via pipx]\n       B --> C[Run codeaskcli with API Keys]\n       C --> D[Create Pull Request]\n   \n\n#### 核心步骤说明\n1. **Python 环境配置**:\n   - 确保使用 Python 3.12 版本\n2. **CLI 工具安装**:\n   - 通过 `pipx` 全局安装 `codeaskcli` 工具\n3. **文档生成**:\n   - 切换工作目录并注入多个 AI 服务的 API Key\n   - 调用 `codeaskcli` 分析代码生成文档\n4. **自动提交**:\n   - 创建名为 \"Update code documentation\" 的 PR\n   - 自动关联 `documentation` 标签并清理临时分支\n\n---\n\n### 补充说明  \n此 Action 通过 **多AI服务支持** 实现灵活文档生成，开发者在仓库中配置后，可自动保持代码文档与代码变更同步，减少人工维护成本。",
      "fileHash": "deeaca7caa36d317b78591b08641a44c",
      "status": "success"
    },
    {
      "filename": "codeask.yml",
      "content": "### 1. 功能概述  \n该文件是 `CodeAskCLI` 工具的**核心配置文件**，用于定义代码分析工具的行为模式。其核心功能包括：  \n- 配置AI服务参数（如OpenAI/Anthropic的API密钥、模型选择、生成参数）  \n- 控制代码分析器的并发处理能力和输出路径  \n- 过滤需要分析的文件类型（YAML/YML）  \n- 定义代码分析报告的生成模板  \n主要应用于**自动化代码理解场景**，通过AI服务快速生成项目分析文档，帮助开发者快速理解代码架构。\n\n---\n\n### 2. 文件依赖  \n| 依赖对象 | 说明 |\n|---------|------|\n| CodeAskCLI主程序 | 本文件需被主程序加载解析 |\n| AI服务SDK | 根据`provider`配置（如openai、anthropic的Python包） |\n| glob模块 | 实现`**.yaml`/`**.yml`文件过滤 |\n| 并发处理库 | 实现`concurrency:8`的并行分析（如Python的concurrent.futures） |\n\n---\n\n### 3. 代码结构分析  \n\n#### 关键配置模块说明：\nyaml\napi:            # AI服务接入配置\n  provider      → 服务商选择（OpenAI/Anthropic等）\n  model         → 大语言模型版本选择\n  temperature   → 生成文本的创造性控制\n  base_url      → 自定义API端点（支持私有化部署）\n\nanalyzer:       # 分析引擎配置\n  concurrency   → 并行分析线程数\n  output_file   → 分析结果存储路径\n\nfilters:        # 文件筛选规则\n  - \"**.yaml\"   → 使用glob模式匹配YAML文件\n\ntemplates:      # 报告生成模板\n  single_page   → 单文件分析模板\n  summary       → 项目总结模板\n\n\n#### 执行流程示意图（Mermaid流程图）：\nmermaid\ngraph TD\n    A[加载codeask.yml] --> B{解析API配置}\n    B --> C[初始化AI服务连接]\n    A --> D{解析分析器配置}\n    D --> E[创建线程池]\n    A --> F{应用文件过滤器}\n    F --> G[扫描目标YAML/YML文件]\n    G --> H[并发分析文件]\n    H --> I{应用模板?}\n    I -->|single_page| J[生成单文件报告]\n    I -->|summary| K[生成项目总结]\n",
      "fileHash": "120af51df6bb9f4cc1c948e957608e65",
      "status": "success"
    }
  ]
}