{
  "globalAnalysis": {
    "results": {
      "cli_analysis": {
        "globalAnalysisName": "CLI Analysis",
        "singlePagePrompt": "你是一个专业的代码分析助手，当用户提供代码文件时，请分析此代码文件在项目中的角色。假定用户对代码不熟悉，并希望快速了解项目的目的和实现方式。请按照以下结构化框架进行分析：\n1. 功能概述：用简明语言（100字以内）总结代码核心功能，描述代码实现目标、应用场景及主要模块，强调关键功能和用途。\n2. 列出该文件依赖的其他文件或模块。\n3. 代码结构分析：分析代码中关键函数、类和方法，简要说明它们的功能和作用；基于代码内容和结构，选择合适的 Mermaid 图表（流程图、时序图、类图或状态图）展示执行流程或模块关系，确保图表符合 Mermaid 语法。\n  \n",
        "summaryPrompt": "基于各文件分析，生成项目结构分析报告：\n\n1. **项目架构概览**\n   - 描述项目的主要模块和组件。\n   - 提供项目的目录结构树形图。\n   - 说明项目采用的架构设计模式（如MVC、MVVM等）。\n   - 使用Mermaid图表展示项目的分层关系。\n\n2. **模块依赖分析**\n   - 使用Mermaid图表展示模块间的依赖关系。\n   - 简述每个关键模块的职责。\n\n请确保分析清晰易懂，并使用Mermaid图表来可视化项目结构和依赖关系。\n",
        "summary": "### 项目结构分析报告\n\n#### 1. 项目架构概览\n\n**主要模块和组件**\n1. **配置管理模块**：处理YAML配置解析（codeask.yml）\n2. **AI服务模块**：对接OpenAI/Anthropic等AI服务\n3. **分析引擎模块**：实现并发代码分析\n4. **报告生成模块**：根据模板生成结构化报告\n5. **CI/CD模块**：自动化文档生成流程（action.yml）\n\n**目录结构树形图**\nbash\n.\n├── .github/\n│   └── workflows/\n│       └── action.yml         # CI/CD流程定义\n├── configs/\n│   └── codeask.yml           # 核心配置文件\n├── src/\n│   ├── cli/                  # CLI主程序\n│   ├── analyzer/             # 代码分析引擎\n│   ├── ai_service/           # AI服务适配器\n│   └── templates/            # 报告模板库\n└── docs/\n    └── reports/              # 生成的报告输出目录\n\n\n**架构设计模式**\n采用 **分层架构** + **管道过滤器模式**：\n- **配置层**：统一管理运行时参数\n- **处理层**：并发执行代码分析\n- **服务层**：AI服务抽象接口\n- **输出层**：模板化报告生成\n\n**分层关系图（Mermaid）**\nmermaid\ngraph TD\n    A[配置层] --> B[处理层]\n    B --> C[服务层]\n    B --> D[输出层]\n    E[CI/CD层] -->|触发| B\n    style A fill:#f9f,stroke:#333\n    style B fill:#bbf,stroke:#333\n    style C fill:#9f9,stroke:#333\n    style D fill:#f99,stroke:#333\n    style E fill:#ff9,stroke:#333\n\n\n#### 2. 模块依赖分析\n\n**模块依赖图（Mermaid）**\nmermaid\ngraph TD\n    Config[配置模块] --> Analyzer[分析引擎]\n    Analyzer -->|API调用| AI[AI服务模块]\n    Analyzer -->|模板填充| Report[报告生成器]\n    CI[CI/CD模块] -->|调用| CLI[CLI入口]\n    CLI -->|配置加载| Config\n    CLI -->|启动| Analyzer\n    Analyzer -->|并发控制| Pool[线程池]\n    Pool -->|文件处理| Worker[分析工作单元]\n    Worker -->|数据转换| Parser[YAML解析器]\n\n\n**关键模块职责说明**\n\n| 模块名称       | 职责描述                                                                 |\n|----------------|--------------------------------------------------------------------------|\n| **配置模块**   | 解析YAML配置，验证API密钥有效性，提供运行时参数                         |\n| **分析引擎**   | 管理线程池，协调文件扫描与分析的并发执行                                 |\n| **AI服务模块** | 封装不同AI供应商的API调用，实现统一的提示词构建和响应解析接口            |\n| **报告生成器** | 根据模板将分析结果转换为Markdown/HTML格式，支持自定义CSS样式             |\n| **CI/CD模块**  | 自动化环境配置（Python/pipx），安全注入密钥，触发文档生成任务            |\n\n**核心数据流**\nmermaid\nsequenceDiagram\n    participant CI as CI/CD模块\n    participant Config as 配置模块\n    participant Analyzer as 分析引擎\n    participant AI as AI服务\n    \n    CI->>Config: 加载codeask.yml\n    Config-->>CI: 返回配置对象\n    CI->>Analyzer: 初始化分析引擎\n    Analyzer->>AI: 建立API连接\n    loop 文件分析\n        Analyzer->>Analyzer: 并发处理文件\n        Analyzer->>AI: 发送分析请求\n        AI-->>Analyzer: 返回结构化分析\n    end\n    Analyzer->>Report: 生成最终报告\n",
        "timestamp": 1745368306,
        "configHash": "120af51df6bb9f4cc1c948e957608e65",
        "configFile": "/home/runner/work/codeask-cli-ci/codeask-cli-ci/codeask.yml"
      }
    }
  },
  "singleFileResults": [
    {
      "filename": "codeask.yml",
      "content": "### 1. 功能概述  \n该文件是 `CodeAskCLI` 工具的**核心配置文件**，用于定义代码分析工具的行为模式。其核心功能包括：  \n- 配置AI服务参数（如OpenAI/Anthropic的API密钥、模型选择、生成参数）  \n- 控制代码分析器的并发处理能力和输出路径  \n- 过滤需要分析的文件类型（YAML/YML）  \n- 定义代码分析报告的生成模板  \n主要应用于**自动化代码理解场景**，通过AI服务快速生成项目分析文档，帮助开发者快速理解代码架构。\n\n---\n\n### 2. 文件依赖  \n| 依赖对象 | 说明 |\n|---------|------|\n| CodeAskCLI主程序 | 本文件需被主程序加载解析 |\n| AI服务SDK | 根据`provider`配置（如openai、anthropic的Python包） |\n| glob模块 | 实现`**.yaml`/`**.yml`文件过滤 |\n| 并发处理库 | 实现`concurrency:8`的并行分析（如Python的concurrent.futures） |\n\n---\n\n### 3. 代码结构分析  \n\n#### 关键配置模块说明：\nyaml\napi:            # AI服务接入配置\n  provider      → 服务商选择（OpenAI/Anthropic等）\n  model         → 大语言模型版本选择\n  temperature   → 生成文本的创造性控制\n  base_url      → 自定义API端点（支持私有化部署）\n\nanalyzer:       # 分析引擎配置\n  concurrency   → 并行分析线程数\n  output_file   → 分析结果存储路径\n\nfilters:        # 文件筛选规则\n  - \"**.yaml\"   → 使用glob模式匹配YAML文件\n\ntemplates:      # 报告生成模板\n  single_page   → 单文件分析模板\n  summary       → 项目总结模板\n\n\n#### 执行流程示意图（Mermaid流程图）：\nmermaid\ngraph TD\n    A[加载codeask.yml] --> B{解析API配置}\n    B --> C[初始化AI服务连接]\n    A --> D{解析分析器配置}\n    D --> E[创建线程池]\n    A --> F{应用文件过滤器}\n    F --> G[扫描目标YAML/YML文件]\n    G --> H[并发分析文件]\n    H --> I{应用模板?}\n    I -->|single_page| J[生成单文件报告]\n    I -->|summary| K[生成项目总结]\n",
      "fileHash": "120af51df6bb9f4cc1c948e957608e65",
      "status": "success"
    },
    {
      "filename": "action.yml",
      "content": "### 1. 功能概述  \n该文件是 GitHub Actions 的配置文件，用于在持续集成（CI）流程中自动运行 `codeaskcli` 工具生成代码说明。其核心目标是通过集成多种AI服务（OpenAI/Claude/Azure/Gemini）的API密钥，在指定目录下生成代码文档或分析报告，适用于自动化代码文档生成场景。\n\n---\n\n### 2. 依赖项  \n- **外部 Actions**:\n  - `actions/setup-python@v5`（Python环境搭建）\n  - `threeal/pipx-install-action@v1.0.0`（通过pipx安装Python包）\n- **工具依赖**:\n  - `codeaskcli`（核心代码文档生成工具）\n- **API服务**:\n  - OpenAI/Anthropic/Azure/Gemini（通过环境变量传递API密钥）\n\n---\n\n### 3. 代码结构分析  \n#### 关键模块说明  \n- **输入定义**（`inputs`）:  \n  定义工作目录和多个AI服务的API密钥参数，支持用户自定义配置（如 `working-directory` 默认当前目录）。\n\n- **执行流程**（`runs`）:  \n  采用 **复合步骤模式**（`composite`），包含三个核心步骤：\n  1. **Python环境初始化**: 通过 `setup-python` 安装指定版本的Python 3.12\n  2. **CLI工具安装**: 使用 `pipx-install-action` 全局安装 `codeaskcli`\n  3. **代码生成执行**: 设置工作目录和AI服务密钥，运行 `codeaskcli` 命令\n\n#### 流程图（Mermaid）  \nmermaid\nflowchart TD\n    A[开始] --> B[设置Python 3.12环境]\n    B --> C[安装codeaskcli]\n    C --> D[配置工作目录]\n    D --> E[注入AI API密钥]\n    E --> F[执行codeaskcli生成代码说明]\n    F --> G[结束]\n\n\n---\n\n### 技术亮点  \n- **多AI服务支持**: 通过环境变量动态注入不同AI服务的API密钥，实现灵活的后端切换\n- **隔离式安装**: 使用 `pipx` 全局安装CLI工具，避免Python环境依赖冲突\n- **目录可配置**: `working-directory` 参数允许在不同子目录中执行文档生成",
      "fileHash": "d89bef7f7fdd142dd4e16a27174ed6ba",
      "status": "success"
    }
  ]
}