{
  "globalAnalysis": {
    "results": {
      "cli_analysis": {
        "globalAnalysisName": "CLI Analysis",
        "singlePagePrompt": "你是一个专业的代码分析助手，当用户提供代码文件时，请分析此代码文件在项目中的角色。假定用户对代码不熟悉，并希望快速了解项目的目的和实现方式。请按照以下结构化框架进行分析：\n1. 功能概述：用简明语言（100字以内）总结代码核心功能，描述代码实现目标、应用场景及主要模块，强调关键功能和用途。\n2. 列出该文件依赖的其他文件或模块。\n3. 代码结构分析：分析代码中关键函数、类和方法，简要说明它们的功能和作用；基于代码内容和结构，选择合适的 Mermaid 图表（流程图、时序图、类图或状态图）展示执行流程或模块关系，确保图表符合 Mermaid 语法。\n  \n",
        "summaryPrompt": "基于各文件分析，生成项目结构分析报告：\n\n1. **项目架构概览**\n   - 描述项目的主要模块和组件。\n   - 提供项目的目录结构树形图。\n   - 说明项目采用的架构设计模式（如MVC、MVVM等）。\n   - 使用Mermaid图表展示项目的分层关系。\n\n2. **模块依赖分析**\n   - 使用Mermaid图表展示模块间的依赖关系。\n   - 简述每个关键模块的职责。\n\n请确保分析清晰易懂，并使用Mermaid图表来可视化项目结构和依赖关系。\n",
        "summary": "### 项目结构分析报告\n\n#### 一、项目架构概览\n\n**1. 主要模块和组件**\n\n├── 配置模块\n├── AI服务集成模块\n├── 代码分析引擎\n├── 文件处理模块\n├── 模板引擎模块\n└── CLI交互模块\n\n\n**2. 目录结构树形图**\n\ncodeask-cli/\n├── config/\n│   └── codeask.yaml       # 核心配置文件\n├── src/\n│   ├── cli.py             # CLI命令入口\n│   ├── analyzer/          # 代码分析引擎\n│   │   ├── core.py        # 并发分析控制器\n│   │   └── parser.py      # AI响应解析器\n│   ├── services/          # AI服务集成\n│   │   ├── openai.py\n│   │   ├── anthropic.py\n│   │   └── factory.py     # 服务工厂\n│   ├── utils/\n│   │   ├── filters.py     # 文件过滤处理器\n│   │   └── templates.py   # 提示词模板引擎\n└── outputs/               # 分析报告输出目录\n\n\n**3. 架构设计模式**\n采用 **分层架构** 与 **工厂模式** 组合设计：\n- **控制层**：CLI命令解析与执行流控制\n- **服务层**：AI服务工厂动态创建不同供应商实现\n- **数据层**：配置文件与模板的读取解析\n- **适配器模式**：统一不同AI服务的API调用接口\n\n**4. 分层架构图（Mermaid）**\nmermaid\ngraph TD\n    A[CLI交互层] --> B[分析控制层]\n    B --> C[AI服务层]\n    C --> D[数据处理层]\n    D --> E[配置/模板]\n    style E fill:#f9f,stroke:#333\n\n\n#### 二、模块依赖分析\n\n**1. 模块依赖图（Mermaid）**\nmermaid\ngraph LR\n    CLI[CLI模块] --> ConfigLoader[配置加载器]\n    CLI --> Analyzer[分析引擎]\n    Analyzer -->|依赖| AIFactory[AI服务工厂]\n    Analyzer --> FileFilter[文件过滤器]\n    Analyzer --> TemplateEngine[模板引擎]\n    AIFactory --> OpenAIService[OpenAI实现]\n    AIFactory --> AnthropicService[Anthropic实现]\n    TemplateEngine -->|读取| YamlTemplates[YAML模板]\n\n\n**2. 关键模块职责说明**\n\n| 模块名称         | 职责描述                                                                 |\n|------------------|------------------------------------------------------------------------|\n| **配置加载器**   | 解析YAML配置，验证API密钥，处理环境变量注入                              |\n| **AI服务工厂**   | 根据provider配置动态创建对应AI服务实例，统一接口返回                      |\n| **分析引擎**     | 控制并发文件处理流程，协调过滤器与模板引擎，处理AI响应解析                |\n| **文件过滤器**   | 应用glob规则过滤目标文件，支持排除模式处理                               |\n| **模板引擎**     | 动态注入代码内容到预设模板，生成符合AI要求的提示词                        |\n| **响应解析器**   | 标准化AI返回结果，提取结构化数据，处理可能的异常响应格式                  |\n\n#### 三、核心流程说明\nmermaid\nsequenceDiagram\n    participant User as 用户\n    participant CLI as CLI工具\n    participant Analyzer as 分析引擎\n    participant AI as AI服务\n    \n    User->>CLI: 执行分析命令\n    CLI->>ConfigLoader: 加载配置\n    ConfigLoader-->>CLI: 返回配置对象\n    CLI->>Analyzer: 初始化分析器\n    Analyzer->>FileFilter: 获取目标文件列表\n    FileFilter-->>Analyzer: 返回过滤后文件\n    loop 并发处理文件\n        Analyzer->>TemplateEngine: 生成提示词\n        TemplateEngine-->>Analyzer: 返回完整prompt\n        Analyzer->>AI: 发送分析请求\n        AI-->>Analyzer: 返回原始结果\n        Analyzer->>Parser: 解析结构化数据\n    end\n    Analyzer->>CLI: 生成最终报告\n    CLI->>User: 输出分析结果\n\n\n#### 四、扩展能力设计\n1. **插件化扩展**：通过实现`BaseAIService`接口可快速新增AI服务支持\n2. **模板热更新**：修改YAML模板文件无需重新编译即可生效\n3. **动态过滤器**：支持用户自定义glob模式覆盖默认过滤规则\n\n该架构通过清晰的层次划分和模块化设计，实现了代码分析工具的高扩展性和可维护性，各模块通过标准接口交互，符合单一职责原则。",
        "timestamp": 1745335643,
        "configHash": "109483c67b95c4f1e18b9d44b94d4a01",
        "configFile": "C:\\Users\\13940\\codeask-cli-ci\\codeask.yaml"
      }
    }
  },
  "singleFileResults": [
    {
      "filename": "codeask.yaml",
      "content": "### 1. 功能概述  \n该文件是 **CodeAskCLI工具的配置文件**，用于定义代码分析工具与AI服务的交互参数、文件分析规则及提示词模板。其核心功能包括：  \n- 配置AI服务（如OpenAI/Anthropic/Azure/Gemini）的API密钥、模型参数  \n- 控制代码分析器的并发处理能力与输出路径  \n- 定义文件过滤规则（支持glob模式）  \n- 提供自然语言提示词模板（单文件分析/项目总结）  \n**应用场景**：用户通过CLI工具分析代码时，该文件指导工具如何与AI交互、处理文件并生成结构化报告。\n\n---\n\n### 2. 依赖关系  \nplaintext\n依赖项类型        具体依赖\n───────────────────────────────────────────\nAI服务SDK        openai/anthropic/google-generativeai 等库（根据provider配置决定）\n配置文件解析器   PyYAML 或类似YAML解析库\n环境变量         各AI平台的API密钥环境变量（生产环境建议使用）\n代码分析器       CLI工具的主程序模块（需读取此配置文件）\n\n\n---\n\n### 3. 代码结构分析  \n#### 关键配置模块说明：  \n| 配置块      | 核心参数               | 功能说明                      |\n|-------------|------------------------|-----------------------------|\n| `api`       | provider/model/temperature | 定义AI服务类型与生成参数控制    |\n| `analyzer`  | concurrency/output_file   | 控制并发处理能力和结果保存路径  |\n| `filters`   | glob模式列表             | 指定需要分析的文件类型          |\n| `templates` | single_page/summary       | 结构化提示词模板设计            |\n\n#### 执行流程图（Mermaid）：\nmermaid\ngraph TD\n    A[启动CLI工具] --> B[加载codeask.yaml]\n    B --> C{验证API配置}\n    C -->|有效| D[设置AI服务参数]\n    C -->|无效| E[抛出配置错误]\n    D --> F[初始化分析器]\n    F --> G[应用文件过滤器]\n    G --> H[并发处理匹配文件]\n    H --> I[注入模板生成提示词]\n    I --> J[调用AI服务分析]\n    J --> K[保存结构化报告]\n",
      "fileHash": "109483c67b95c4f1e18b9d44b94d4a01",
      "status": "success"
    }
  ]
}