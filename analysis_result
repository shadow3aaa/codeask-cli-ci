{
  "globalAnalysis": {
    "results": {
      "cli_analysis": {
        "globalAnalysisName": "CLI Analysis",
        "singlePagePrompt": "你是一个专业的代码分析助手，当用户提供代码文件时，请分析此代码文件在项目中的角色。假定用户对代码不熟悉，并希望快速了解项目的目的和实现方式。请按照以下结构化框架进行分析：\n1. 功能概述：用简明语言（100字以内）总结代码核心功能，描述代码实现目标、应用场景及主要模块，强调关键功能和用途。\n2. 列出该文件依赖的其他文件或模块。\n3. 代码结构分析：分析代码中关键函数、类和方法，简要说明它们的功能和作用；基于代码内容和结构，选择合适的 Mermaid 图表（流程图、时序图、类图或状态图）展示执行流程或模块关系，确保图表符合 Mermaid 语法。\n  \n",
        "summaryPrompt": "基于各文件分析，生成项目结构分析报告：\n\n1. **项目架构概览**\n   - 描述项目的主要模块和组件。\n   - 提供项目的目录结构树形图。\n   - 说明项目采用的架构设计模式（如MVC、MVVM等）。\n   - 使用Mermaid图表展示项目的分层关系。\n\n2. **模块依赖分析**\n   - 使用Mermaid图表展示模块间的依赖关系。\n   - 简述每个关键模块的职责。\n\n请确保分析清晰易懂，并使用Mermaid图表来可视化项目结构和依赖关系。\n",
        "summary": "# 项目结构分析报告\n\n## 一、项目架构概览\n\n### 1. 主要模块和组件\n| 模块名称          | 功能描述                                                                 |\n|-------------------|--------------------------------------------------------------------------|\n| **CI/CD自动化模块** | 通过GitHub Actions实现代码分析自动化流程，触发代码文档生成任务            |\n| **CLI核心引擎**    | 提供`codeaskcli`命令行工具，执行代码分析、AI服务调用、报告生成等核心逻辑  |\n| **AI服务适配层**   | 集成OpenAI/Claude/Azure/Gemini等主流AI服务，提供统一的大模型调用接口      |\n| **配置管理中心**   | 通过YAML配置文件管理API密钥、分析策略、输出模板等运行时参数              |\n\n### 2. 目录结构树形图\ntext\n.\n├── .github/\n│   └── workflows/\n│       └── action.yml        # CI/CD流程定义\n├── configs/\n│   └── codeask.yml           # 核心配置文件\n├── src/                      # CLI工具源代码\n│   ├── __init__.py\n│   ├── analyzer.py           # 代码分析引擎\n│   ├── ai_client.py          # AI服务适配器\n│   └── templates/            # 报告模板\n└── docs/                     # 生成文档输出目录\n\n\n### 3. 架构设计模式\n采用 **管道过滤器模式（Pipeline-Filter）** 与 **分层架构** 的混合设计：\n- **数据采集层**：文件扫描与过滤（Glob模式匹配）\n- **处理管道层**：并行分析线程池（`concurrency:8`配置）\n- **AI服务层**：多厂商大模型服务适配（OpenAI/Claude等）\n- **输出层**：模板引擎驱动的报告生成（单文件/总结模板）\n\n### 4. 分层关系图（Mermaid）\nmermaid\nflowchart TB\n    subgraph CI/CD层\n        A[GitHub Action] -->|触发| B(CLI工具)\n    end\n    subgraph 应用层\n        B --> C[配置加载]\n        C --> D[文件扫描器]\n        D --> E[分析管道]\n        E --> F[AI服务网关]\n        F --> G[模板渲染]\n    end\n    subgraph 基础设施层\n        H[(AI云服务)] <--> F\n        I[文件系统] <--> G\n    end\n\n\n---\n\n## 二、模块依赖分析\n\n### 1. 依赖关系图（Mermaid）\nmermaid\ngraph TD\n    A[GitHub Action] --> B(codeaskcli)\n    B --> C{codeask.yml}\n    B --> D[AI SDK]\n    C --> E[分析策略]\n    C --> F[模板配置]\n    D --> G[(OpenAI)]\n    D --> H[(Azure)]\n    D --> I[(Gemini)]\n    E --> J[并发控制器]\n    F --> K[模板引擎]\n\n\n### 2. 关键模块职责说明\n\n#### (1) CI/CD自动化模块\n- **职责**：在代码变更时自动触发文档生成流水线\n- **核心能力**：\n  - 多环境Python版本管理（3.12专用环境）\n  - 安全密钥注入（通过`env`变量传递API密钥）\n  - 隔离式工具安装（基于pipx的环境隔离）\n\n#### (2) CLI核心引擎\n- **职责**：协调代码分析全流程的中央控制器\n- **关键子模块**：\n  - **配置加载器**：解析YAML配置并验证参数合法性\n  - **并发调度器**：通过线程池实现多文件并行分析（8线程）\n  - **异常处理器**：统一处理AI服务调用失败/超时等异常\n\n#### (3) AI服务适配层\n- **职责**：提供标准化接口对接不同AI服务商\n- **核心机制**：\n  - 动态服务发现：根据`provider`配置自动加载对应SDK\n  - 参数归一化：将各厂商差异化的API参数转换为统一格式\n  - 失败重试：针对网络抖动等问题实现自动重试机制\n\n#### (4) 模板渲染引擎\n- **职责**：将AI分析结果转换为结构化文档\n- **模板类型**：\n  - **单文件报告模板**：展示单个YAML文件的架构分析结果\n  - **项目总结模板**：生成包含模块依赖、架构设计模式等全局视角的报告\n\n---\n\n## 三、技术架构特征总结\n\n1. **多级扩展能力**：\n   - 通过`codeask.yml`支持新增AI服务商（添加`api.provider`配置项）\n   - 通过模板系统扩展输出格式（支持HTML/Markdown等格式扩展）\n\n2. **弹性伸缩设计**：\n   - 并发线程数可配置（`analyzer.concurrency`参数动态调整）\n   - 支持私有化AI服务部署（通过`api.base_url`配置自定义端点）\n\n3. **安全隔离机制**：\n   - 密钥注入与CI/CD环境严格隔离（GitHub Secrets管理）\n   - 通过`pipx`实现CLI工具与系统Python环境的物理隔离\n\n该架构在保持轻量化的同时，通过模块化设计实现了高扩展性，可快速适配不同AI服务商和项目分析需求，为自动化代码文档生成提供了标准化解决方案。",
        "timestamp": 1745368495,
        "configHash": "120af51df6bb9f4cc1c948e957608e65",
        "configFile": "/home/runner/work/codeask-cli-ci/codeask-cli-ci/codeask.yml"
      }
    }
  },
  "singleFileResults": [
    {
      "filename": "action.yml",
      "content": "### 1. 功能概述  \n该文件是 GitHub Actions 的配置文件，用于在持续集成（CI）流程中自动运行 `codeaskcli` 工具生成代码说明。其核心目标是通过集成多种AI服务（OpenAI/Claude/Azure/Gemini）的API密钥，在指定目录下生成代码文档或分析报告，适用于自动化代码文档生成场景。\n\n---\n\n### 2. 依赖项  \n- **外部 Actions**:\n  - `actions/setup-python@v5`（Python环境搭建）\n  - `threeal/pipx-install-action@v1.0.0`（通过pipx安装Python包）\n- **工具依赖**:\n  - `codeaskcli`（核心代码文档生成工具）\n- **API服务**:\n  - OpenAI/Anthropic/Azure/Gemini（通过环境变量传递API密钥）\n\n---\n\n### 3. 代码结构分析  \n#### 关键模块说明  \n- **输入定义**（`inputs`）:  \n  定义工作目录和多个AI服务的API密钥参数，支持用户自定义配置（如 `working-directory` 默认当前目录）。\n\n- **执行流程**（`runs`）:  \n  采用 **复合步骤模式**（`composite`），包含三个核心步骤：\n  1. **Python环境初始化**: 通过 `setup-python` 安装指定版本的Python 3.12\n  2. **CLI工具安装**: 使用 `pipx-install-action` 全局安装 `codeaskcli`\n  3. **代码生成执行**: 设置工作目录和AI服务密钥，运行 `codeaskcli` 命令\n\n#### 流程图（Mermaid）  \nmermaid\nflowchart TD\n    A[开始] --> B[设置Python 3.12环境]\n    B --> C[安装codeaskcli]\n    C --> D[配置工作目录]\n    D --> E[注入AI API密钥]\n    E --> F[执行codeaskcli生成代码说明]\n    F --> G[结束]\n\n\n---\n\n### 技术亮点  \n- **多AI服务支持**: 通过环境变量动态注入不同AI服务的API密钥，实现灵活的后端切换\n- **隔离式安装**: 使用 `pipx` 全局安装CLI工具，避免Python环境依赖冲突\n- **目录可配置**: `working-directory` 参数允许在不同子目录中执行文档生成",
      "fileHash": "d89bef7f7fdd142dd4e16a27174ed6ba",
      "status": "success"
    },
    {
      "filename": "codeask.yml",
      "content": "### 1. 功能概述  \n该文件是 `CodeAskCLI` 工具的**核心配置文件**，用于定义代码分析工具的行为模式。其核心功能包括：  \n- 配置AI服务参数（如OpenAI/Anthropic的API密钥、模型选择、生成参数）  \n- 控制代码分析器的并发处理能力和输出路径  \n- 过滤需要分析的文件类型（YAML/YML）  \n- 定义代码分析报告的生成模板  \n主要应用于**自动化代码理解场景**，通过AI服务快速生成项目分析文档，帮助开发者快速理解代码架构。\n\n---\n\n### 2. 文件依赖  \n| 依赖对象 | 说明 |\n|---------|------|\n| CodeAskCLI主程序 | 本文件需被主程序加载解析 |\n| AI服务SDK | 根据`provider`配置（如openai、anthropic的Python包） |\n| glob模块 | 实现`**.yaml`/`**.yml`文件过滤 |\n| 并发处理库 | 实现`concurrency:8`的并行分析（如Python的concurrent.futures） |\n\n---\n\n### 3. 代码结构分析  \n\n#### 关键配置模块说明：\nyaml\napi:            # AI服务接入配置\n  provider      → 服务商选择（OpenAI/Anthropic等）\n  model         → 大语言模型版本选择\n  temperature   → 生成文本的创造性控制\n  base_url      → 自定义API端点（支持私有化部署）\n\nanalyzer:       # 分析引擎配置\n  concurrency   → 并行分析线程数\n  output_file   → 分析结果存储路径\n\nfilters:        # 文件筛选规则\n  - \"**.yaml\"   → 使用glob模式匹配YAML文件\n\ntemplates:      # 报告生成模板\n  single_page   → 单文件分析模板\n  summary       → 项目总结模板\n\n\n#### 执行流程示意图（Mermaid流程图）：\nmermaid\ngraph TD\n    A[加载codeask.yml] --> B{解析API配置}\n    B --> C[初始化AI服务连接]\n    A --> D{解析分析器配置}\n    D --> E[创建线程池]\n    A --> F{应用文件过滤器}\n    F --> G[扫描目标YAML/YML文件]\n    G --> H[并发分析文件]\n    H --> I{应用模板?}\n    I -->|single_page| J[生成单文件报告]\n    I -->|summary| K[生成项目总结]\n",
      "fileHash": "120af51df6bb9f4cc1c948e957608e65",
      "status": "success"
    }
  ]
}